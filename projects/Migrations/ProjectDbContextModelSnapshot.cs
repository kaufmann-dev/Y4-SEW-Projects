// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projects.model;

namespace projects.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    partial class ProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("projects.model.AFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("FACILITY_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FacilityCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(7)")
                        .HasColumnName("FACILITY_CODE");

                    b.Property<string>("FacilityTitle")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("FACILITY_TITLE");

                    b.HasKey("Id");

                    b.HasIndex("FacilityCode")
                        .IsUnique();

                    b.HasIndex("FacilityTitle")
                        .IsUnique();

                    b.ToTable("FACILITIES");

                    b.HasDiscriminator<string>("FACILITY_TYPE").HasValue("AFacility");
                });

            modelBuilder.Entity("projects.model.AProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PROJECT_ID");

                    b.Property<string>("LegalFoundation")
                        .IsRequired()
                        .HasColumnType("VARCHAR(4)")
                        .HasColumnName("LEGAL_FOUNDATION");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("PROJECTS");
                });

            modelBuilder.Entity("projects.model.Debitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DEBITOR_ID");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DEBITORS");
                });

            modelBuilder.Entity("projects.model.Funding", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("PROJECT_ID");

                    b.Property<int>("DebitorId")
                        .HasColumnType("int")
                        .HasColumnName("DEBITOR_ID");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("AMOUNT");

                    b.HasKey("ProjectId", "DebitorId");

                    b.HasIndex("DebitorId");

                    b.ToTable("FUNDING");
                });

            modelBuilder.Entity("projects.model.Subproject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SUBPROJECT_ID");

                    b.Property<int>("AppliedResearch")
                        .HasColumnType("INT")
                        .HasColumnName("APPLIED_RESEARCH");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int>("FocusResearch")
                        .HasColumnType("INT")
                        .HasColumnName("FOCUS_RESEARCH");

                    b.Property<int?>("InstituteId")
                        .HasColumnType("int")
                        .HasColumnName("INSTITUTE_ID");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("PROJECT_ID");

                    b.Property<int>("TheoreticalResearch")
                        .HasColumnType("INT")
                        .HasColumnName("THEORETICAL_RESEARCH");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SUBPROJECTS");
                });

            modelBuilder.Entity("projects.model.Faculty", b =>
                {
                    b.HasBaseType("projects.model.AFacility");

                    b.ToTable("FACILITIES");

                    b.HasDiscriminator().HasValue("FACULTY");
                });

            modelBuilder.Entity("projects.model.Institute", b =>
                {
                    b.HasBaseType("projects.model.AFacility");

                    b.Property<int?>("FACULTY_ID")
                        .HasColumnType("int");

                    b.HasIndex("FACULTY_ID");

                    b.ToTable("FACILITIES");

                    b.HasDiscriminator().HasValue("INSTITUTE");
                });

            modelBuilder.Entity("projects.model.RequestFundingProject", b =>
                {
                    b.HasBaseType("projects.model.AProject");

                    b.Property<sbyte>("IsSmallProject")
                        .HasColumnType("TINYINT")
                        .HasColumnName("IS_SMALL_PROJECT");

                    b.ToTable("REQUEST_FUNDING_PROJECTS");
                });

            modelBuilder.Entity("projects.model.ResearchFundingProject", b =>
                {
                    b.HasBaseType("projects.model.AProject");

                    b.Property<sbyte>("IsEUFunded")
                        .HasColumnType("TINYINT")
                        .HasColumnName("IS_EU_FUNDED");

                    b.Property<sbyte>("IsFFGFunded")
                        .HasColumnType("TINYINT")
                        .HasColumnName("IS_FFG_FUNDED");

                    b.Property<sbyte>("IsFWFFunded")
                        .HasColumnType("TINYINT")
                        .HasColumnName("IS_FWF_FUNDED");

                    b.ToTable("RESEARCH_FUNDING_PROJECT");
                });

            modelBuilder.Entity("projects.model.Funding", b =>
                {
                    b.HasOne("projects.model.Debitor", "Debitor")
                        .WithMany()
                        .HasForeignKey("DebitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projects.model.AProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debitor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("projects.model.Subproject", b =>
                {
                    b.HasOne("projects.model.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId");

                    b.HasOne("projects.model.AProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Institute");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("projects.model.Institute", b =>
                {
                    b.HasOne("projects.model.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FACULTY_ID");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("projects.model.RequestFundingProject", b =>
                {
                    b.HasOne("projects.model.AProject", null)
                        .WithOne()
                        .HasForeignKey("projects.model.RequestFundingProject", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projects.model.ResearchFundingProject", b =>
                {
                    b.HasOne("projects.model.AProject", null)
                        .WithOne()
                        .HasForeignKey("projects.model.ResearchFundingProject", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
